#Use an Ubuntu 18.04 base for our staging server
FROM vm/ubuntu:18.04

# Install dependencies for building Python
RUN apt update && apt install -y software-properties-common \
    build-essential curl libffi-dev libssl-dev \
    zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
    wget llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev liblzma-dev git

# Download and compile Python 3.10
WORKDIR /usr/src
RUN wget https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz
RUN tar -xvf Python-3.10.13.tgz
WORKDIR /usr/src/Python-3.10.13
RUN ./configure --enable-optimizations
RUN make -j$(nproc)
RUN make altinstall

# Explicitly link Python binaries
RUN ln -sf /usr/local/bin/python3.10 /usr/bin/python3
RUN ln -sf /usr/local/bin/python3.10 /usr/bin/python
RUN ln -sf /usr/local/bin/pip3.10 /usr/bin/pip3
RUN ln -sf /usr/local/bin/pip3.10 /usr/bin/pip

# Verify installation
RUN /usr/bin/python3 --version
RUN /usr/bin/python --version



RUN python -m pip install pymongo
RUN python -m pip install atproto


SECRET ENV BLSKY_USERNAME
RUN echo "secret is: $BLSKY_USERNAME"

SECRET ENV BLSKY_PASSWORD
RUN echo "secret is: $BLSKY_PASSWORD"

SECRET ENV MONGO_URI
RUN echo "secret is: $MONGO_URI"

# You could also install & start a database:
# RUN apt-get update && apt-get install postgresql
WORKDIR /root

# This line copies the repository to /root in the runner
COPY . .
RUN ls

RUN pip install flask python-dotenv
# Expose the webserver in the staging server as a secure link.
# Whenever someone clicks the link, we'll load this staging server and forward
# their requests to it.
RUN BACKGROUND python3 app.py
EXPOSE WEBSITE http://localhost:80
